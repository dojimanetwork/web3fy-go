version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=web3fygo_prod
      - DB_USER=web3fygo_user
      - DB_PASSWORD=${DB_PASSWORD:-secure_password_123}
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - web3fygo-network
    volumes:
      - app-logs:/app/logs
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=web3fygo_prod
      - POSTGRES_USER=web3fygo_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - web3fygo-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U web3fygo_user -d web3fygo_prod" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - web3fygo-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  web3fygo-network:
    driver: bridge

volumes:
  postgres-data:
  app-logs:
  nginx-logs:
