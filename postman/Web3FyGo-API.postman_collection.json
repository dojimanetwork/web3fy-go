{
    "info": {
        "_postman_id": "web3fygo-api-collection",
        "name": "Web3FyGo API",
        "description": "API collection for Web3FyGo product scraping and metadata management",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "web3fygo"
    },
    "item": [
        {
            "name": "Core Endpoints",
            "item": [
                {
                    "name": "Welcome Message",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response contains welcome message\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.eql('Welcome to Web3FyGo!');",
                                    "    pm.expect(jsonData.version).to.eql('1.0.0');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                ""
                            ]
                        },
                        "description": "Get welcome message and basic API information"
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        ""
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json; charset=utf-8"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"message\": \"Welcome to Web3FyGo!\",\n    \"version\": \"1.0.0\",\n    \"timestamp\": \"2024-01-01T12:00:00.000Z\",\n    \"endpoints\": {\n        \"health\": \"/health\",\n        \"api\": \"/api\",\n        \"products\": \"/api/products?trending=amazon\"\n    }\n}"
                        }
                    ]
                },
                {
                    "name": "Health Check",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Health check response is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.status).to.eql('healthy');",
                                    "    pm.expect(jsonData).to.have.property('uptime');",
                                    "    pm.expect(jsonData).to.have.property('memory');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/health",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "health"
                            ]
                        },
                        "description": "Check API health status and system metrics"
                    },
                    "response": [
                        {
                            "name": "Healthy Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/health",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "health"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json; charset=utf-8"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"status\": \"healthy\",\n    \"uptime\": 123.456,\n    \"timestamp\": \"2024-01-01T12:00:00.000Z\",\n    \"memory\": {\n        \"rss\": 50331648,\n        \"heapTotal\": 20971520,\n        \"heapUsed\": 15728640,\n        \"external\": 1048576\n    },\n    \"environment\": \"development\"\n}"
                        }
                    ]
                }
            ],
            "description": "Core application endpoints for health checks and basic information"
        },
        {
            "name": "API Information",
            "item": [
                {
                    "name": "API Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"API status is operational\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.status).to.eql('success');",
                                    "    pm.expect(jsonData.message).to.eql('API is operational');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/status",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "status"
                            ]
                        },
                        "description": "Check API operational status"
                    },
                    "response": []
                },
                {
                    "name": "API Info",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"API info contains endpoints\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.name).to.eql('Web3FyGo API');",
                                    "    pm.expect(jsonData.endpoints).to.be.an('array');",
                                    "    pm.expect(jsonData.features.scraping.localBrowserSupport).to.be.undefined;",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/info",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "info"
                            ]
                        },
                        "description": "Get detailed API information and available endpoints"
                    },
                    "response": []
                },
                {
                    "name": "Scraper Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Scraper status is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.status).to.eql('operational');",
                                    "    pm.expect(jsonData.browser).to.have.property('mode');",
                                    "    pm.expect(jsonData.features.localBrowserSupport).to.eql(true);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/scraper-status",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "scraper-status"
                            ]
                        },
                        "description": "Get detailed scraper status and configuration"
                    },
                    "response": []
                },
                {
                    "name": "Configure Scraper - Local Mode",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Mode updated successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.newMode).to.eql('local');",
                                    "    pm.expect(jsonData.message).to.include('updated to local');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mode\": \"local\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/scraper-config",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "scraper-config"
                            ]
                        },
                        "description": "Configure scraper to use local visible browser"
                    },
                    "response": []
                },
                {
                    "name": "Configure Scraper - Headless Mode",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Mode updated successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.newMode).to.eql('headless');",
                                    "    pm.expect(jsonData.message).to.include('updated to headless');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"mode\": \"headless\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/scraper-config",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "scraper-config"
                            ]
                        },
                        "description": "Configure scraper to use headless browser mode"
                    },
                    "response": []
                },
                {
                    "name": "Browser Diagnostics",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Diagnostics completed\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('system');",
                                    "    pm.expect(jsonData.data).to.have.property('checks');",
                                    "});",
                                    "",
                                    "pm.test(\"Display diagnostic results\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    console.log('=== Browser Diagnostics ===');",
                                    "    console.log('Platform:', jsonData.data.system.platform);",
                                    "    console.log('Node Version:', jsonData.data.system.nodeVersion);",
                                    "    ",
                                    "    if (jsonData.data.checks.chrome) {",
                                    "        console.log('Chrome:', jsonData.data.checks.chrome.available ? '✅ Available' : '❌ Not found');",
                                    "    }",
                                    "    ",
                                    "    if (jsonData.data.checks.launchTest) {",
                                    "        console.log('Browser Launch:', jsonData.data.checks.launchTest.success ? '✅ Success' : '❌ Failed');",
                                    "        if (!jsonData.data.checks.launchTest.success) {",
                                    "            console.log('Error:', jsonData.data.checks.launchTest.error);",
                                    "        }",
                                    "    }",
                                    "    ",
                                    "    if (jsonData.data.checks.amazonConnectivity) {",
                                    "        console.log('Amazon Connectivity:', jsonData.data.checks.amazonConnectivity.success ? '✅ Success' : '❌ Failed');",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/browser-diagnostics",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "browser-diagnostics"
                            ]
                        },
                        "description": "Run comprehensive browser and system diagnostics"
                    },
                    "response": []
                }
            ],
            "description": "API information and status endpoints"
        },
        {
            "name": "User Management",
            "item": [
                {
                    "name": "Get Users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Users list is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.users).to.be.an('array');",
                                    "    pm.expect(jsonData.count).to.be.a('number');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users"
                            ]
                        },
                        "description": "Get list of sample users"
                    },
                    "response": []
                },
                {
                    "name": "Create User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"User created successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.eql('User created successfully');",
                                    "    pm.expect(jsonData.user).to.have.property('id');",
                                    "    pm.expect(jsonData.user.name).to.eql('{{testUserName}}');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"name\": \"{{testUserName}}\",\n    \"email\": \"{{testUserEmail}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users"
                            ]
                        },
                        "description": "Create a new user with name and email"
                    },
                    "response": []
                },
                {
                    "name": "Create User - Missing Name",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message for missing name\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.error).to.eql('Bad Request');",
                                    "    pm.expect(jsonData.message).to.eql('Name and email are required');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"test@example.com\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/users",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "users"
                            ]
                        },
                        "description": "Test validation - attempt to create user without name"
                    },
                    "response": []
                }
            ],
            "description": "User management endpoints for creating and retrieving users"
        },
        {
            "name": "Products",
            "item": [
                {
                    "name": "Get Products",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response structure is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success', true);",
                                    "    pm.expect(jsonData).to.have.property('timestamp');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData).to.have.property('data');",
                                    "});",
                                    "",
                                    "pm.test(\"Products data is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('products');",
                                    "    pm.expect(jsonData.data.products).to.be.an('array');",
                                    "    pm.expect(jsonData.data).to.have.property('totalFound');",
                                    "    pm.expect(jsonData.data).to.have.property('source');",
                                    "    pm.expect(jsonData.data).to.have.property('parameters');",
                                    "});",
                                    "",
                                    "pm.test(\"Parameters are correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    var params = jsonData.data.parameters;",
                                    "    pm.expect(params).to.have.property('trending', 'amazon');",
                                    "    pm.expect(params).to.have.property('category');",
                                    "    pm.expect(params).to.have.property('limit');",
                                    "    pm.expect(params).to.have.property('maxAgeHours');",
                                    "});",
                                    "",
                                    "pm.test(\"Products have required fields\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.data.products.length > 0) {",
                                    "        var product = jsonData.data.products[0];",
                                    "        pm.expect(product).to.have.property('title');",
                                    "        pm.expect(product).to.have.property('price');",
                                    "        pm.expect(product).to.have.property('rating');",
                                    "        pm.expect(product).to.have.property('source');",
                                    "        pm.expect(product.source).to.include(jsonData.data.parameters.category);",
                                    "    }",
                                    "});",
                                    "",
                                    "pm.test(\"Data source is correctly indicated\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    var source = jsonData.data.source;",
                                    "    var message = jsonData.message;",
                                    "",
                                    "    if (source.includes('Cache')) {",
                                    "        console.log('Using cached data from database');",
                                    "        pm.expect(message).to.include('from database cache');",
                                    "    } else if (source.includes('Live')) {",
                                    "        console.log('Using live scraped data');",
                                    "        pm.expect(message).to.include('via live scraping');",
                                    "    } else if (source.includes('Fallback')) {",
                                    "        console.log('Using fallback data');",
                                    "        pm.expect(message).to.include('from fallback data');",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/products?trending=amazon&category=electronics&limit=5",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "products"
                            ],
                            "query": [
                                {
                                    "key": "trending",
                                    "value": "amazon",
                                    "description": "Source of trending products (currently only 'amazon' supported)"
                                },
                                {
                                    "key": "category",
                                    "value": "electronics",
                                    "description": "Product category (e.g., electronics, books, etc.)"
                                },
                                {
                                    "key": "limit",
                                    "value": "5",
                                    "description": "Number of products to return (max 50)"
                                },
                                {
                                    "key": "force",
                                    "value": "false",
                                    "description": "Force refresh data (default: false)"
                                }
                            ]
                        },
                        "description": "Get trending products with caching and fallback mechanisms"
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "GET",
                                "url": {
                                    "raw": "{{baseUrl}}/api/products?trending=amazon&category=electronics&limit=5"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "json",
                                "raw": "{\n    \"success\": true,\n    \"data\": {\n        \"products\": [\n            {\n                \"rank\": 1,\n                \"title\": \"Sample Product\",\n                \"price\": \"$99.99\",\n                \"rating\": \"4.5 out of 5 stars\",\n                \"image\": \"https://example.com/image.jpg\",\n                \"link\": \"https://amazon.com/dp/1234567890\",\n                \"source\": \"Amazon Electronics Best Sellers\",\n                \"scrapedAt\": \"2024-03-20T12:00:00Z\"\n            }\n        ],\n        \"totalFound\": 1,\n        \"source\": \"PostgreSQL Cache (electronics)\",\n        \"parameters\": {\n            \"trending\": \"amazon\",\n            \"category\": \"electronics\",\n            \"limit\": 5,\n            \"maxAgeHours\": 24\n        }\n    },\n    \"message\": \"Successfully retrieved 1 products from PostgreSQL\"\n}"
                            }
                        }
                    ]
                },
                {
                    "name": "Get Product Details",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{baseUrl}}/api/products/details?url=https://www.amazon.com/dp/B08N5KWB9H",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "products",
                                "details"
                            ],
                            "query": [
                                {
                                    "key": "url",
                                    "value": "https://www.amazon.com/dp/B08N5KWB9H",
                                    "description": "Amazon product URL to fetch details for"
                                }
                            ]
                        },
                        "description": "Get detailed information for a specific Amazon product"
                    },
                    "response": [
                        {
                            "name": "Success Response",
                            "originalRequest": {
                                "method": "GET",
                                "url": {
                                    "raw": "{{baseUrl}}/api/products/details?url=https://www.amazon.com/dp/B08N5KWB9H"
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "json",
                                "raw": "{\n    \"success\": true,\n    \"data\": {\n        \"product\": {\n            \"title\": \"Sample Product\",\n            \"price\": \"$99.99\",\n            \"rating\": \"4.5 out of 5 stars\",\n            \"image\": \"https://example.com/image.jpg\",\n            \"link\": \"https://amazon.com/dp/B08N5KWB9H\",\n            \"source\": \"Amazon Product Detail\",\n            \"scrapedAt\": \"2024-03-20T12:00:00Z\",\n            \"asin\": \"B08N5KWB9H\",\n            \"availability\": \"In Stock\",\n            \"reviewCount\": \"1,234 reviews\",\n            \"brand\": \"Sample Brand\",\n            \"features\": [\n                \"Feature 1\",\n                \"Feature 2\",\n                \"Feature 3\"\n            ]\n        },\n        \"source\": \"Database Cache (Product Detail) - 2 hours old\",\n        \"parameters\": {\n            \"url\": \"https://www.amazon.com/dp/B08N5KWB9H\",\n            \"maxAgeHours\": 24\n        }\n    },\n    \"message\": \"Successfully retrieved product details from database cache\"\n}"
                            }
                        },
                        {
                            "name": "Missing URL",
                            "originalRequest": {
                                "method": "GET",
                                "url": {
                                    "raw": "{{baseUrl}}/api/products/details"
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "json",
                                "raw": "{\n    \"success\": false,\n    \"error\": \"Missing required parameter\",\n    \"message\": \"The 'url' parameter is required and must be a valid Amazon product URL\"\n}"
                            }
                        },
                        {
                            "name": "Invalid URL",
                            "originalRequest": {
                                "method": "GET",
                                "url": {
                                    "raw": "{{baseUrl}}/api/products/details?url=invalid-url"
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "body": {
                                "mode": "json",
                                "raw": "{\n    \"success\": false,\n    \"error\": \"Invalid URL format\",\n    \"message\": \"Please provide a valid Amazon product URL\"\n}"
                            }
                        }
                    ]
                },
                {
                    "name": "Get Products - Missing Required Parameter",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error response is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success', false);",
                                    "    pm.expect(jsonData).to.have.property('error', 'Missing required parameter');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/products?category=electronics&limit=5",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "products"
                            ],
                            "query": [
                                {
                                    "key": "category",
                                    "value": "electronics",
                                    "description": "Category of products to fetch"
                                },
                                {
                                    "key": "limit",
                                    "value": "5",
                                    "description": "Number of products to fetch"
                                }
                            ]
                        },
                        "description": "Test validation - missing required 'trending' parameter"
                    },
                    "response": []
                },
                {
                    "name": "Get Products - Invalid Trending Parameter",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error response is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success', false);",
                                    "    pm.expect(jsonData).to.have.property('error', 'Invalid trending parameter');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/products?trending=invalid&category=electronics&limit=5",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "products"
                            ],
                            "query": [
                                {
                                    "key": "trending",
                                    "value": "invalid",
                                    "description": "Invalid trending parameter"
                                },
                                {
                                    "key": "category",
                                    "value": "electronics",
                                    "description": "Category of products to fetch"
                                },
                                {
                                    "key": "limit",
                                    "value": "5",
                                    "description": "Number of products to fetch"
                                }
                            ]
                        },
                        "description": "Test validation - invalid 'trending' parameter (only 'amazon' is supported)"
                    },
                    "response": []
                },
                {
                    "name": "Categories",
                    "item": [
                        {
                            "name": "Get Categories",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Status code is 200\", function () {",
                                            "    pm.response.to.have.status(200);",
                                            "});",
                                            "",
                                            "pm.test(\"Response structure is valid\", function () {",
                                            "    var jsonData = pm.response.json();",
                                            "    pm.expect(jsonData).to.have.property('success', true);",
                                            "    pm.expect(jsonData).to.have.property('timestamp');",
                                            "    pm.expect(jsonData).to.have.property('message');",
                                            "    pm.expect(jsonData).to.have.property('data');",
                                            "});",
                                            "",
                                            "pm.test(\"Categories data is valid\", function () {",
                                            "    var jsonData = pm.response.json();",
                                            "    pm.expect(jsonData.data).to.have.property('categories');",
                                            "    pm.expect(jsonData.data.categories).to.be.an('array');",
                                            "    pm.expect(jsonData.data).to.have.property('parameters');",
                                            "    pm.expect(jsonData.data.parameters).to.have.property('type', 'amazon');",
                                            "});",
                                            "",
                                            "pm.test(\"Category items have required fields\", function () {",
                                            "    var jsonData = pm.response.json();",
                                            "    if (jsonData.data.categories.length > 0) {",
                                            "        var category = jsonData.data.categories[0];",
                                            "        pm.expect(category).to.have.property('category');",
                                            "        pm.expect(category).to.have.property('url');",
                                            "        pm.expect(category).to.have.property('description');",
                                            "    }",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/api/categories?type=amazon",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "api",
                                        "categories"
                                    ],
                                    "query": [
                                        {
                                            "key": "type",
                                            "value": "amazon",
                                            "description": "Type of categories to fetch (e.g., amazon)"
                                        }
                                    ]
                                },
                                "description": "Get all categories for a specific type from the metadata table"
                            },
                            "response": []
                        },
                        {
                            "name": "Get Categories - Missing Type",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "exec": [
                                            "pm.test(\"Status code is 400\", function () {",
                                            "    pm.response.to.have.status(400);",
                                            "});",
                                            "",
                                            "pm.test(\"Error response is valid\", function () {",
                                            "    var jsonData = pm.response.json();",
                                            "    pm.expect(jsonData).to.have.property('success', false);",
                                            "    pm.expect(jsonData).to.have.property('error', 'Missing required parameter');",
                                            "    pm.expect(jsonData).to.have.property('message');",
                                            "});"
                                        ],
                                        "type": "text/javascript"
                                    }
                                }
                            ],
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/api/categories",
                                    "host": [
                                        "{{baseUrl}}"
                                    ],
                                    "path": [
                                        "api",
                                        "categories"
                                    ]
                                },
                                "description": "Test validation - missing required 'type' parameter"
                            },
                            "response": []
                        }
                    ],
                    "description": "Category management endpoints for retrieving available categories"
                }
            ],
            "description": "Product scraping endpoints for Amazon and other platforms"
        },
        {
            "name": "Metadata",
            "item": [
                {
                    "name": "Get Metadata",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response structure is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success', true);",
                                    "    pm.expect(jsonData).to.have.property('timestamp');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData).to.have.property('data');",
                                    "});",
                                    "",
                                    "pm.test(\"Metadata data is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('metadata');",
                                    "    pm.expect(jsonData.data.metadata).to.be.an('array');",
                                    "    pm.expect(jsonData.data).to.have.property('parameters');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/metadata?type=amazon&category=electronics",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "metadata"
                            ],
                            "query": [
                                {
                                    "key": "type",
                                    "value": "amazon",
                                    "description": "Type of metadata (e.g., amazon)"
                                },
                                {
                                    "key": "category",
                                    "value": "electronics",
                                    "description": "Category of metadata (optional)"
                                }
                            ]
                        },
                        "description": "Get metadata for a specific type and optional category"
                    },
                    "response": []
                },
                {
                    "name": "Create/Update Metadata",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response structure is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success', true);",
                                    "    pm.expect(jsonData).to.have.property('timestamp');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData).to.have.property('data');",
                                    "});",
                                    "",
                                    "pm.test(\"Metadata was created/updated\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('metadata');",
                                    "    pm.expect(jsonData.data.metadata).to.have.property('type', 'amazon');",
                                    "    pm.expect(jsonData.data.metadata).to.have.property('category', 'electronics');",
                                    "    pm.expect(jsonData.data.metadata).to.have.property('url');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"type\": \"amazon\",\n    \"category\": \"electronics\",\n    \"url\": \"https://www.amazon.com/gp/bestsellers/electronics/\",\n    \"description\": \"Amazon Electronics Best Sellers\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/metadata",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "metadata"
                            ]
                        },
                        "description": "Create or update metadata for a specific type and category"
                    },
                    "response": []
                },
                {
                    "name": "Delete Metadata",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response structure is valid\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('success', true);",
                                    "    pm.expect(jsonData).to.have.property('timestamp');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData).to.have.property('data');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/metadata?type=amazon&category=electronics",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "metadata"
                            ],
                            "query": [
                                {
                                    "key": "type",
                                    "value": "amazon",
                                    "description": "Type of metadata to delete"
                                },
                                {
                                    "key": "category",
                                    "value": "electronics",
                                    "description": "Category of metadata to delete"
                                }
                            ]
                        },
                        "description": "Delete metadata for a specific type and category"
                    },
                    "response": []
                }
            ],
            "description": "Metadata management endpoints for storing and retrieving category URLs"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Set dynamic variables",
                    "pm.globals.set('timestamp', Date.now());",
                    "",
                    "// Generate test data",
                    "const names = ['John Doe', 'Jane Smith', 'Bob Johnson', 'Alice Brown'];",
                    "const domains = ['example.com', 'test.com', 'demo.org'];",
                    "",
                    "const randomName = names[Math.floor(Math.random() * names.length)];",
                    "const randomDomain = domains[Math.floor(Math.random() * domains.length)];",
                    "const randomEmail = randomName.toLowerCase().replace(' ', '.') + '@' + randomDomain;",
                    "",
                    "pm.globals.set('testUserName', randomName);",
                    "pm.globals.set('testUserEmail', randomEmail);"
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Global test for response time",
                    "pm.test(\"Response time is reasonable\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                    "});",
                    "",
                    "// Global test for content type",
                    "if (pm.response.code !== 404) {",
                    "    pm.test(\"Content-Type is JSON\", function () {",
                    "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                    "    });",
                    "}"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:3000",
            "type": "string"
        },
        {
            "key": "authToken",
            "value": "demo-token",
            "type": "string"
        },
        {
            "key": "productLimit",
            "value": "10",
            "type": "string"
        }
    ]
}