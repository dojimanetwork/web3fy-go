name: Deploy Application

on:
  workflow_run:
    workflows: ["Build and Push Docker Images"]
    types:
      - completed
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-to-aws:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main'
    environment: production-aws

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --services ${{ secrets.ECS_SERVICE_NAME }}

  deploy-to-digital-ocean:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main'
    environment: production-digitalocean

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        run: |
          # Update app with new image
          doctl apps update ${{ secrets.DO_APP_ID }} \
            --spec .do/app.yaml

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    environment: kubernetes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          # Update deployment with new image
          kubectl set image deployment/web3fygo-app \
            web3fygo-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-production \
            --namespace=web3fygo

          # Wait for rollout
          kubectl rollout status deployment/web3fygo-app --namespace=web3fygo

  deploy-to-docker-compose:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    environment: vps-deployment

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/web3fygo
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Update and restart services
            docker-compose -f docker-compose.prod.yml up -d
            
            # Clean up old images
            docker system prune -f
            
            # Check service health
            sleep 30
            curl -f http://localhost/health || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-to-aws, deploy-to-digital-ocean, deploy-to-kubernetes, deploy-to-docker-compose]
    if: always()

    steps:
      - name: Notify Slack on success
        if: ${{ contains(needs.*.result, 'success') }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'üöÄ Web3FyGo deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '‚ùå Web3FyGo deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 